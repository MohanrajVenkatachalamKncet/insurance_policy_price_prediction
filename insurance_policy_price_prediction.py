# -*- coding: utf-8 -*-
"""insurance Claim Aithon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TYcBBZfxu5CWPm_8zcbnQSFP4p3Kef-B
"""

import pandas as pd

import numpy as np

import scipy as sp

import matplotlib.pyplot as plt

import sklearn as sk
from sklearn.model_selection import cross_val_score,KFold
#Leave-One-Out cross-validator(LOOCV)
from sklearn import model_selection,linear_model

from sklearn.metrics import mean_squared_error,mean_absolute_error

data=pd.read_csv('insurancee.csv')

data

data.isnull().sum()

data.info()

data.describe()

'''
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data['sex']=le.fit_transform(data['sex'])
'''

'''
data['sex']
'''

'''
data['smoker']=le.fit_transform(data['smoker'])
'''

'''
data['smoker']
'''

'''
data.iloc[0:,0:]
'''

def map_smoking(column):
  mapped=[]
  for row in column:        
      if row=="yes":
          mapped.append(1)
      else:
          mapped.append(0)  
  return mapped
data["smoker_norm"]=map_smoking(data["smoker"])

data['smoker_norm']

nonnum_cols=[col for col in data.select_dtypes(include=["object"])]

nonnum_cols

def map_obese(column):
    mapped=[]
    for row in column:
        if row>30:
            mapped.append(1)
        else:
            mapped.append(0)
    return mapped
data["obese"]=map_obese(data["bmi"])

'''
colnum=len(data.columns)-3
fig,ax=plt.subplots(colnum,1,figsize=(3,25))
ax[0].set_ylabel("charges")
p_vals={}
for ind,col in enumerate([i for i in data.columns if i not in ["smoker","region","charges","sex_norm"]]):  
    ax[ind].scatter(data[col],data.charges,s=5)
    ax[ind].set_xlabel(col)
    ax[ind].set_ylabel("charges")    
plt.show()
'''
corr_vals=[]
collabel=[]
for col in [i for i in data.columns if i not in nonnum_cols]:
    
    p_val=sp.stats.pearsonr(data[col],data["charges"])
    corr_vals.append(np.abs(p_val[0]))
    print(col,": ",np.abs(p_val[0]))
    collabel.append(col)
plt.bar(range(1,len(corr_vals)+1),corr_vals)
plt.xticks(range(1,len(corr_vals)+1),collabel,rotation=45)
plt.ylabel("Absolute correlation")

cols_not_reg3=['age', 'obese', 'smoker_norm']

kf=KFold(n_splits=10, random_state=1, shuffle=True)
intercepts=[]
mses=[]
coefs=[]

for train_index, test_index in kf.split(data[cols_not_reg3]):
    
    lr=linear_model.LinearRegression()
    lr.fit(data[cols_not_reg3].iloc[train_index],data["charges"].iloc[train_index])
    lr_predictions=lr.predict(data[cols_not_reg3].iloc[test_index])
    
    lr_mse=mean_squared_error(data["charges"].iloc[test_index],lr_predictions)
    
    intercepts.append(lr.intercept_)
    
    coefs.append(lr.coef_)
    mses.append(lr_mse)

rmses=[x**.5 for x in mses]#root mean square error
avg_rmse=np.mean(rmses)
avg_intercept=np.mean(intercepts)
age_coefs=[]
obesity_coefs=[]
smoking_coefs=[]
for vals in coefs:
    #print vals[0]
    age_coefs.append(vals[0])
    obesity_coefs.append(vals[1])
    smoking_coefs.append(vals[2])
age_coef=np.mean(age_coefs)
obesity_coef=np.mean(obesity_coefs)
smoking_coef=np.mean(smoking_coefs)
print("a: ",age_coef," b: ",obesity_coef," c: ",smoking_coef," intercept: ",avg_intercept)

def calculate_insurance(age,obesity,smoking):
    y=(age_coef*age)+(obesity_coef*obesity)+(smoking_coef*smoking)+avg_intercept
    return y
a=int(input("enter the age"))
if(a>64):
   print("your entered Age is too high,it might have a chance to giving wrong prediction")
   print("Avoid to giving the policy to the age above 65")
b=float(input("enter the BMI interms of obesity 1 or not 0"))
c=int(input("Smoker 1 or Not 0"))
print(calculate_insurance(a,b,c))
